<predefined> ::= "i0 = int(); i1 = int(); i2 = int()"
"b0 = bool(); b1 = bool(); b2 = bool()"
"s0 = str(); s1 = str(); s2 = str()"
"c0 = ' '; c1 = ' '; c2 = ' '"
"li0 = []; li1 = []; li2 = []"
"res0 = []"
"if 'rec_counter' not in globals():{:"
"globals()['rec_counter'] = 0:}"
"global rec_counter"
<code>
<code> ::= <code><statement>'\n'|<statement>'\n'<code>|<code><statement>'\n'<code>|<statement>'\n'
<statement> ::= <simple_stmt>|<compound_stmt>
<simple_stmt> ::= <call>|<assign>
<compound_stmt> ::= <for>|<if>|'loopBreak% = 0\nwhile '<bool>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'
<call> ::= <list_int_var>'.append('<int>')'|<list_int_var>'.insert('<int>','<int>')'|<list_int_var>'.insert(0,'<int>')'|'deleteListItem('<list_int>', '<int>')'|'setListIndexTo('<list_int>', '<int>', '<int>')'|'if rec_counter < 900 and not stop.value:{:'
'rec_counter += 1'
<list_int_var>' = evolve('<int>')'
'rec_counter -= 1'
':}'|'return res0'
<assign> ::= <bool_var>' = '<bool>|<int_assign>|<char_var>' = '<char>|<string_var>' = '<string>|<list_int_var>' = '<list_int>
<for> ::= 'loopBreak% = 0\nfor forCounter% in saveRange(0, '<int>'):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<int_var>' in saveRange(0, '<int>'):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor forCounter% in saveRange('<int>', '<int>'):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<int_var>' in saveRange('<int>', '<int>'):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor forCounter% in '<string>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<char_var>' in '<string>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<string_var>' in '<string>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<string_var>' in '<string>'.strip().split():{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<string_var>' in saveSplit('<string>'.strip(), '<string>'):{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor forCounter% in '<list_int>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'|'loopBreak% = 0\nfor '<int_var>' in '<list_int>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'
<number> ::= <number><num>|<num><number>|<number><num><number>|<num>
<num> ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='|'is'|'is not'
<string_const_part> ::= <string_const_part><string_literal>|<string_literal><string_const_part>|<string_const_part><string_literal><string_const_part>|<string_literal>
<in_list_comp_op> ::= 'in'|'not in'
<list_comp_op> ::= '=='|'!='
<bool_var> ::= 'b0'|'b1'|'b2'
<bool> ::= <bool_var>|<bool_const>|'(not '<bool>')'|'('<bool>' '<bool_op>' '<bool>')'|'( not '<bool>' and '<bool>')'|'('<bool>' and not '<bool>')'|'('<int>' '<comp_op>' '<int>')'|'bool('<int>')'|<char>'.isdigit()'|<char>'.isspace()'|<char>'.isalpha()'|'('<char>' == '<char>')'|'('<string>' in '<string>')'|'('<string>' not in '<string>')'|'('<string>' == '<string>')'|'('<string>' != '<string>')'|<string>'.startswith('<string>')'|<string>'.endswith('<string>')'|'(not '<string>')'|'('<int>' '<in_list_comp_op>' '<list_int>')'|'('<list_int>' '<list_comp_op>' '<list_int>')'|'('<list_int>' == [])'
<bool_op> ::= 'and'|'or'|'^'|'=='
<bool_const> ::= 'True'|'False'
<if> ::= 'if '<bool>':{:\n'<code>':}'|'if '<bool>':{:\n'<code>':}else:{:\n'<code>':}'
<int> ::= 'int('<bool>')'|<int_var>|'int('<number>'.0)'|<arith_prefix><int>|'( '<int>' '<arith_ops>' '<int>' )'|<int_arith_ops_protected>'('<int>','<int>')'|'min('<int>', '<int>')'|'max('<int>', '<int>')'|'abs('<int>')'|'('<int>' + 1)'|'('<int>' - 1)'|'ord('<char>')'|'len('<string>')'|<string>'.count('<char>')'|<string>'.count('<string>')'|'getIndexIntList('<list_int>', '<int>')'|'len('<list_int>')'|'getIndexIntList('<list_int>', 0)'|'getIndexIntList('<list_int>', -1)'|'saveIndex('<list_int>', '<int>')'|<list_int>'.count('<int>')'
<string> ::= 'str('<bool>')'|'str('<int>')'|<char>|<string_var>|"'"<string_const_part>"'"|<string_slice>|'('<string>' + '<string>')'|<string>'.lstrip()'|<string>'.rstrip()'|<string>'.strip()'|<string>'.lstrip('<string>')'|<string>'.rstrip('<string>')'|<string>'.strip('<string>')'|<string>'.capitalize()'|"''.join(reversed("<string>'))'|<string>'.replace('<string>','<string>', 1)'|<string>'.replace('<string>','<string>')'|<string>'.replace('<char>','<char>', 1)'|<string>'.replace('<char>','<char>')'|<string>'.replace('<char>',"")'|'setchar('<string>','<char>','<int>')'
<int_var> ::= 'i0'|'i1'|'i2'|'in0'
<int_assign> ::= <int_var>' = '<int>|<int_var>' '<arith_ops>'= '<int>
<arith_ops> ::= '+'|'-'|'*'
<int_arith_ops_protected> ::= 'divInt'|'mod'
<arith_prefix> ::= '+'|'-'
<char> ::= 'int_to_chr('<int>')'|<char_var>|"'"<char_literal>"'"|'getCharFromString('<string>', '<int>')'
<char_var> ::= 'c0'|'c1'|'c2'
<char_literal> ::= '\\n'|'\\t'|' '|'!'|'"'|'#'|'$'|'%'|'&'|"\\'"|'('|')'|'*'|'+'|','|'-'|'.'|'/'|'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|':'|';'|'<'|'='|'>'|'?'|'@'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'['|'\\\\'|']'|'^'|'_'|'`'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'{'|'|'|'}'
<string_var> ::= 's0'|'s1'|'s2'
<string_slice> ::= <string>'['<int>':'<int>']'|<string>'[:'<int>']'|<string>'['<int>':]'|<string>'[1:]'|<string>'[:1]'
<string_literal> ::= ''|'\\n'|'\\t'|' '|'!'|'"'|'#'|'$'|'%'|'&'|"\\'"|'('|')'|'*'|'+'|','|'-'|'.'|'/'|'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|':'|';'|'<'|'='|'>'|'?'|'@'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'['|'\\\\'|']'|'^'|'_'|'`'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'{'|'|'|'}'
<list_int_var> ::= 'li0'|'li1'|'li2'|'res0'
<list_int> ::= <list_int_var>|'list(saveRange('<int>','<int>'))'|<list_int_slice>|'list(reversed('<list_int>'))'|'[x if x == '<int>' else '<int>' for x in '<list_int>']'|'replaceFirstElementInList('<list_int>','<int>','<int>')'|'[x for x in '<list_int>' if x == '<int>']'
<list_int_slice> ::= <list_int>'['<int>':'<int>']'|<list_int>'[:'<int>']'|<list_int>'['<int>':]'|<list_int>'[1:]'|<list_int>'[:1]'
