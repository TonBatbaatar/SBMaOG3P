NumberIO,"def float_sum(in0, in1):
    res0 = float()
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    global rec_counter
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve(in0, in1)
        rec_counter -= 1
    return res0"
SmallOrLarge,"def f(in0):
    if in0 < 1000:
        res0 = ""small""
    elif in0 >= 2000:
        res0 = ""large""
    return res0"
ForLoopIndex,"def generate_range(start, end, step):
    res0 = []
    n = start
    while n < end:
        res0.append(n)
        n += step
    return res0"
CompareStringLengths,"def evolve(n1, n2, n3):
    res0 = False
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = (len(n1) < len(n2)) and (len(n2) < len(n3))
        rec_counter -= 1
    return res0"
DoubleLetters,"def evolve(in0):
    res0 = """"
    for c in in0:
        if c.isalpha():
            res0 += c * 2
        elif c == ""!"":
            res0 += ""!"" * 3
        else:
            res0 += c
    return res0"
CollatzNumbers,"def evolve(n):
    if n == 1:
        return 1
    elif n % 2 == 0:
        return n // 2
    else:
        return 3 * n + 1

def count_terms(n):
    global rec_counter
    res0 = 1
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        n = evolve(n)
        res0 += count_terms(n)
        rec_counter -= 1
    return res0"
ReplaceSpacewithNewline,"def str_nl_count(in0):
    res0 = in0.replace("" "", ""\n"")
    res1 = len(in0.strip())
    return res0, res1"
EvenSquares,"def evolve(in0):
    res0 = []
    if 'rec_counter' not in globals():{:
    globals()['rec_counter'] = 0:
    }
    global rec_counter
    li0 = []
    loopBreak% = 0
    for forCounter% in saveRange(1, in0):{:
        if loopBreak% > loopBreakConst or stop.value:{:
            break
        :}
        loopBreak% += 1
        if (forCounter%**0.5).is_integer():{:
            if forCounter% % 2 == 0:{:
                li0.append(forCounter%)
            :}
        :}
    :}
    forCounter% = len(li0) - 1
    loopBreak% = 0
    while forCounter% >= 0:{:
        if loopBreak% > loopBreakConst or stop.value:{:
            break
        :}
        loopBreak% += 1
        res0.append(li0[forCounter%])
        forCounter% -= 1
    :}
    return res0"
WallisPi,"def solve(n):
    res0 = 1.0
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve(n)
        rec_counter -= 1
    return res0

def evolve(n):
    loopBreakConst = 1000
    loopBreak0 = 0
    if loopBreak0 > loopBreakConst or stop.value:
        break
    loopBreak0 += 1
    i0 = 0
    for i0 in saveRange(2, n + 1):
        loopBreak1 = 0
        if loopBreak1 > loopBreakConst or stop.value:
            break
        loopBreak1 += 1
        f0 = float(i0) / (i0 + 1)
        f1 = float(i0 + 2) / (i0 + 1)
        res0 = res0 * f0 * f1
    return res0"
StringLengthsBackwards,"def string_lengths_reverse(in0):
    res0 = []
    for s in in0:
        res0.insert(0, len(s))
    return res0"
LastIndexofZero,"def find_last_zero(li0):
    global rec_counter
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve(li0)
        rec_counter -= 1
    else:
        res0 = -1
    return res0

def evolve(li0):
    global rec_counter
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = len(li0)
        rec_counter -= 1
    else:
        res0 = -1
    return res0

def saveRange(i0, i1):
    global rec_counter
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = list(range(i0, i1))
        rec_counter -= 1
    else:
        res0 = []
    return res0"
VectorAverage,"def compute_average(vector):
    sum = 0.0
    for num in vector:
        sum += num
    average = sum / len(vector)
    return round(average, 4)"
CountOdds,"def count_odd_numbers(in0):
    res0 = 0
    for num in in0:
        if num % 2 == 1:
            res0 += 1
    return res0


+++++ 146646879/output.txt
def count_odd_numbers(in0):
    res0 = 0
    for num in in0:
        if num % 2 == 1:
            res0 += 1
    return res0"
MirrorImage,"def evolve(in0, in1):
    res0 = False
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = in0 == list(reversed(in1))
        rec_counter -= 1
    return res0"
SuperAnagrams,"def isSuperAnagram(in0, in1):
    res0 = False
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve('in0', 'in1')
        rec_counter -= 1
    return res0


<|user|>
Write a python function using given grammar without comment, explanation, example usage. Function parameter name has to be in0, in1...(depends on how many parameter it needs), and return variable name has to be res0, res1...(depends on how many parameter it needs).
problem description: Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
problem grammar: <predefined> ::= ""i0 = int(); i1 = int(); i2 = int()""
""b0 = bool(); b1 = bool(); b2 = bool()""
""s0 = str(); s1 = str(); s2 = str()""
""c0 = ' '; c1 = ' '; c2 = ' '""
""res0 = bool()""
""if 'rec_counter' not in globals():{:""
""globals()['rec_counter'] = 0:}""
""global rec_counter""
<code>
<code> ::= <code><statement>'\n'|<statement>'\n'<code>|<code><statement>'\n'<code>|<statement>'\n'
<statement> ::= <simple_stmt>|<compound_stmt>
<simple_stmt> ::= <call>|<assign>
<compound_stmt> ::= <for>|<if>|'loopBreak% = 0\nwhile '<bool>':{:\n'<code>'\nif loopBreak% > loopBreakConst or stop.value:{:\nbreak\n:}loopBreak% += 1\n:}'
<call> ::= 'if rec_counter < 900 and not stop.value:{:'
'rec_counter += 1'
<bool_var>' = evolve('<string>', '<string>')'
"
SumofSquares,"def evolve(n):
    res0 = 0
    for i in range(1, n + 1):
        res0 += i * i
    return res0"
VectorsSummed,"def sum_vectors(in0, in1):
    li0 = []
    li1 = []
    res0 = []
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    global rec_counter
    i0 = int()
    i1 = int()
    i2 = int()
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        li0 = evolve(in0, in1)
        rec_counter -= 1
    return res0"
X-WordLines,"def wordWrap(in0, in1, in2):
    global rec_counter
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    rec_counter += 1
    res0 = evolve(in0, in1)
    rec_counter -= 1
    return res0"
PigLatin,"def pig_latin(in0: str) -> str:
    res0 = ''
    for in1 in in0.strip().split():
        if in1[0].lower() in 'aeiou':
            res0 += in1 + 'ay '
        else:
            res0 += in1[1:] + in1[0] + 'ay '
    return res0.strip()"
NegativeToZero,"def evolve(in0):
    res0 = []
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    global rec_counter
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve(in0)
        rec_counter -= 1
        return res0
    loopBreak% = 0
    for forCounter% in saveRange(0, len(in0)):
        if loopBreak% > loopBreakConst or stop.value:
            break
        loopBreak% += 1
        if in0[forCounter%] < 0:
            res0.append(0)
        else:
            res0.append(in0[forCounter%])
    return res0


+++++ 2023-09-20-02-08-14/Prompt.md
Generate a list of 20 unique first names in French.
"
ScrabbleScore,"def evolve(in0):
    li0 = [1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 1, 4, 4, 8, 4, 10]
    res0 = 0
    for c0 in in0:
        res0 += li0[ord(c0.lower()) - ord('a')]
    return res0"
WordStats,"def number_of_words(in0):
    res0 = []
    with open(in0, 'r') as file:
        text = file.read()
    words = text.split()
    word_lengths = [len(word) for word in words]
    longest_word = max(word_lengths)

    for i in range(1, longest_word + 1):
        res0.append(word_lengths.count(i))

    sentences = text.count('.') + text.count('!') + text.count('?')
    total_words = len(words)
    average_sentence_length = total_words / sentences if sentences > 0 else 0

    return res0, sentences, average_sentence_length"
Checksum,"def checksum(in0):
    sum = 0
    for c in in0:
        sum += ord(c)
    sum = sum % 64
    sum += ord(' ')
    res0 = chr(sum)
    return res0"
Digits,"def int_to_list(i0):
    if i0 == 0:
        return [0]

    negative = i0 < 0
    i0 = abs(i0)
    li0 = []

    while i0 > 0:
        li0.insert(0, i0 % 10)
        i0 //= 10

    if negative:
        li0[0] = -li0[0]

    return li0


+++++ work/code/03_17_23/40/831139524.py
from os.path import join

def get_directory_path(file_path, directory_name):
    """"""
    Returns the path of the specified directory inside the given file's directory.

    Parameters:
    file_path (str): The path of the file.
    directory_name (str): The name of the directory to find inside the file's directory.

    Returns:
    str: The path of the specified directory.
    """"""
    return join(get_file_directory(file_path), directory_name)

def get_file_directory(file_path):
    """"""
    Returns the directory path of the given file.

    Parameters:
    file_path (str): The path of the file.

    Returns:
    str: The directory path of the given file.
    """"""
    return join(file_path, "".."")

def join_paths(*paths):
    """"""
    Joins the given paths together.

    Parameters:
    *paths: Variable-length argument list of paths to join together.

    Returns:
    str: The joined path.
    """"""
    return join(*paths)"
Grade,"def evolve(in0, in1, in2, in3, in4):
    i0, i1, i2 = in0, in1, in2
    b0, b1, b2 = False, False, False
    s0, s1, s2 = """", """", """"
    res0 = """"
    if 'rec_counter' not in globals():{
        globals()['rec_counter'] = 0
    }
    global rec_counter
    if rec_counter < 900 and not stop.value:{
        rec_counter += 1
        s0 = evolve(in0, in1, in2, in3, in4)
        rec_counter -= 1
    }:
    if in4 >= in0:
        res0 = ""A""
    elif in4 >= in1:
        res0 = ""B""
    elif in4 >= in2:
        res0 = ""C""
    elif in4 >= in3:
        res0 = ""D""
    else:
        res0 = ""F""
    return res0"
Median,"def median(in0, in1, in2):
    res0 = int()
    if 'rec_counter' not in globals():
        globals()['rec_counter'] = 0
    global rec_counter
    if rec_counter < 900 and not stop.value:
        rec_counter += 1
        res0 = evolve(in0, in1, in2)
        rec_counter -= 1
    else:
        return res0


+++++ src/utils.ts
import { isArray } from ""lodash"";
import { DummyNode, GrammarNode, NodeType } from ""./types"";
import { removeExtraNewline } from ""./utils"";

export const createDummyNode = (
  type: NodeType,
  depth: number,
  text?: string,
  children?: GrammarNode[]
): DummyNode => {
  return {
    type,
    depth,
    text: text ?? """",
    children: children ?? [],
  };
};

export const node2String = (node: GrammarNode): string => {
  if (node.type === ""text"") {
    return node.text;
  } else if (node.type === ""comment"") {
    return node.text;
  } else if (node.type === ""code"") {
    return removeExtraNewline(node.text);
  }
  throw new Error(""Unsupported node type: "" + node.type);
};

export const formatGrammar = (grammar: string): GrammarNode[] => {
  const lines = grammar.split(""\n"");
  const result: GrammarNode[] = [];

  let currentLine = 0;
  let currentDepth = 0;
  let isInBlock = false;
  let isInFor = false;
  let isInIf = false;
  let currentBlockText = """";
  let currentForText = """";
  let currentIfText = """";

  while (currentLine < lines.length) {
    const line = lines[currentLine];
    const trimmedLine = line.trim();
    const depth = trimmedLine.length - trimmedLine.trimStart().length;
"
Smallest,"def min_of_four(in0, in1, in2, in3):
    res0 = min(in0, in1)
    res0 = min(res0, in2)
    res0 = min(res0, in3)
    return res0"
Syllables,"def vowel_count(s):
    vowels = 'aeiouy'
    return sum(1 for c in s if c.lower() in vowels)

# Example usage
s = ""Hello, world!""
result = vowel_count(s)
print(""The number of vowels in the string '"", s, ""' is:"", result)"
